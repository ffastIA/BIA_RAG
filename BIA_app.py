# =============================================================================
# SISTEMA DE IA PARA AN√ÅLISE DE DOCUMENTOS PDF
# =============================================================================
# Este programa cria uma interface web onde voc√™ pode fazer perguntas sobre
# um documento PDF e receber respostas inteligentes de uma IA.
# =============================================================================

# -----------------------------------------------------------------------------
# 1. IMPORTA√á√ïES - As "Caixas de Ferramentas" que Vamos Usar
# -----------------------------------------------------------------------------

# BIBLIOTECAS B√ÅSICAS DO PYTHON
import os  # Permite acessar arquivos, pastas e configura√ß√µes do computador
import textwrap  # Ajuda a formatar texto, quebrando linhas longas em peda√ßos menores

# BIBLIOTECA PARA CARREGAR SENHAS E CONFIGURA√á√ïES SECRETAS
from dotenv import load_dotenv  # Carrega senhas do arquivo .env (arquivo secreto)

# BIBLIOTECAS DA LANGCHAIN - Especializada em IA e Processamento de Documentos
from langchain_core.prompts import ChatPromptTemplate  # Cria "receitas" de como a IA deve responder
from langchain.chains.combine_documents import create_stuff_documents_chain  # Junta documentos com perguntas
from langchain_community.document_loaders.pdf import PyPDFLoader  # L√™ arquivos PDF
from langchain_openai import ChatOpenAI  # Conversa com a IA da OpenAI (ChatGPT)
from langchain.text_splitter import RecursiveCharacterTextSplitter  # Divide textos grandes em peda√ßos
from langchain.chains.retrieval_qa.base import RetrievalQA  # Sistema de perguntas e respostas
from langchain_openai import OpenAIEmbeddings  # Converte texto em n√∫meros para busca
from langchain_community.vectorstores import FAISS  # Banco de dados r√°pido para busca

# BIBLIOTECAS AUXILIARES
from typing import List  # Para definir que tipo de dados esperamos (lista)
from langchain_core.documents import Document  # Tipo especial de documento do LangChain
import tiktoken  # Conta quantas "palavras" (tokens) tem um texto

# A ESTRELA DO SHOW - STREAMLIT
import streamlit as st  # Cria p√°ginas web bonitas usando apenas Python!

# -----------------------------------------------------------------------------
# 2. CONFIGURA√á√ÉO DA P√ÅGINA - Definindo Como a P√°gina Vai Aparecer
# -----------------------------------------------------------------------------

# Esta fun√ß√£o configura aspectos b√°sicos da p√°gina web
st.set_page_config(
    page_title="Agente de IA: Biometria Inteligente para Aquicultura (BIA)",  # Nome na aba do navegador
    page_icon="ü§ñ",  # Emoji que aparece na aba do navegador
    layout="wide",  # Usa toda a largura da tela (ao inv√©s de ficar estreito)
    initial_sidebar_state="collapsed"  # Esconde a barra lateral para ter mais espa√ßo
)

# -----------------------------------------------------------------------------
# 3. CSS PERSONALIZADO - O "Estilista" que Deixa Tudo Bonito
# -----------------------------------------------------------------------------

# O CSS √© como um "maquiador" que define cores, tamanhos, posi√ß√µes, etc.
# Usamos st.markdown com HTML para aplicar estilos personalizados
st.markdown("""
<style>
    /* ===================================================================== */
    /* CONFIGURA√á√ïES GERAIS DA P√ÅGINA */
    /* ===================================================================== */

    /* Container principal - onde fica todo o conte√∫do da p√°gina */
    .main .block-container {
        padding-top: 0.5rem !important;        /* Espa√ßo pequeno no topo (0.5rem = ~8px) */
        padding-bottom: 0.5rem !important;     /* Espa√ßo pequeno embaixo */
        padding-left: 1rem !important;         /* Espa√ßo nas laterais esquerda */
        padding-right: 1rem !important;        /* Espa√ßo nas laterais direita */
        max-width: none !important;            /* Remove limite de largura (usa tela toda) */
        /* Removemos min-height para permitir layout mais natural */
    }

    /* Remove o cabe√ßalho padr√£o do Streamlit que ocupava espa√ßo desnecess√°rio */
    .stApp > header {
        height: 0rem !important;               /* Altura zero (invis√≠vel) */
        visibility: hidden !important;         /* Torna completamente invis√≠vel */
    }

    /* Compacta todos os elementos da p√°gina para economizar espa√ßo */
    .element-container {
        margin-bottom: 0.3rem !important;      /* Espa√ßo pequeno entre elementos */
    }

    /* ===================================================================== */
    /* ESTILIZA√á√ÉO DO T√çTULO PRINCIPAL */
    /* ===================================================================== */

    /* Container do t√≠tulo principal */
    .titulo-principal {
        margin-top: 0 !important;              /* Sem espa√ßo no topo */
        padding-top: 0.5rem !important;        /* Padding interno pequeno no topo */
        padding-bottom: 0.8rem !important;     /* Padding interno pequeno embaixo */
        text-align: center;                    /* Centraliza o texto */
        border-bottom: 2px solid #e0e0e0;      /* Linha decorativa cinza embaixo */
        margin-bottom: 1rem !important;        /* Espa√ßo ap√≥s o t√≠tulo */
    }

    /* T√≠tulo H1 (o t√≠tulo grande) dentro do container */
    .titulo-principal h1 {
        margin: 0 !important;                  /* Remove margens padr√£o do navegador */
        padding: 0 !important;                 /* Remove padding padr√£o do navegador */
        font-size: 2.2rem !important;          /* Tamanho da fonte (2.2rem = ~35px) */
        line-height: 1.2 !important;           /* Altura da linha (espa√ßamento entre linhas) */
    }

    /* Par√°grafo de descri√ß√£o abaixo do t√≠tulo */
    .titulo-principal p {
        margin: 0.3rem 0 0 0 !important;       /* Margem pequena apenas no topo */
        padding: 0 !important;                 /* Sem padding */
        font-size: 1rem !important;            /* Tamanho da fonte normal */
        color: #666;                           /* Cor cinza para texto secund√°rio */
    }

    /* ===================================================================== */
    /* ESTILIZA√á√ÉO DOS BOT√ïES */
    /* ===================================================================== */

    /* Bot√µes principais (tipo "primary") */
    .stButton > button[kind="primary"] {
        /* Gradiente colorido de fundo (transi√ß√£o do vermelho para azul-verde) */
        background: linear-gradient(90deg, #ff6b6b, #4ecdc4) !important;
        border: none !important;                                          /* Remove borda */
        font-weight: bold !important;                                     /* Texto em negrito */
        transition: all 0.3s ease !important;                            /* Anima√ß√£o suave (0.3s) */
        height: 2.5rem !important;                                       /* Altura fixa */
        font-size: 1rem !important;                                      /* Tamanho da fonte */
        margin: 0.2rem 0 !important;                                     /* Margem pequena */
    }

    /* Efeito quando o mouse passa sobre o bot√£o (hover) */
    .stButton > button[kind="primary"]:hover {
        transform: translateY(-1px) !important;                          /* Move 1px para cima */
        box-shadow: 0 3px 8px rgba(0,0,0,0.15) !important;              /* Adiciona sombra */
    }

    /* ===================================================================== */
    /* CAMPO DE PERGUNTA PR√ìXIMO AO BOT√ÉO - NOVA CONFIGURA√á√ÉO */
    /* ===================================================================== */

    /* Container para o campo de pergunta - agora mais pr√≥ximo do bot√£o */
    .campo-pergunta-container {
        margin-top: 1.5rem !important;         /* Espa√ßo pequeno ap√≥s o bot√£o */
        margin-bottom: 1rem !important;        /* Espa√ßo pequeno antes do pr√≥ximo elemento */
        padding: 1rem 0 !important;            /* Padding vertical reduzido */
    }

    /* Wrapper interno para controlar a largura m√°xima */
    .campo-pergunta-wrapper {
        width: 100% !important;                /* Largura total dispon√≠vel */
        max-width: 800px !important;           /* Largura m√°xima de 800px */
        margin: 0 auto !important;             /* Centraliza horizontalmente */
    }

    /* T√≠tulo do campo de pergunta */
    .titulo-pergunta {
        text-align: center !important;         /* Centraliza o t√≠tulo */
        margin-bottom: 1rem !important;        /* Espa√ßo pequeno abaixo do t√≠tulo */
    }

    /* ===================================================================== */
    /* CAMPO DE ENTRADA DE CHAT */
    /* ===================================================================== */

    /* Container do campo de chat input */
    .stChatInput {
        margin: 0.5rem 0 !important;           /* Espa√ßamento vertical reduzido */
    }

    /* Div interna do campo de chat */
    .stChatInput > div {
        max-width: none !important;            /* Remove limite de largura */
        margin: 0 !important;                  /* Remove margem */
    }

    /* Caixa de dica estilizada */
    .dica-container {
        text-align: center !important;         /* Centraliza o conte√∫do */
        margin-top: 0.8rem !important;         /* Espa√ßo pequeno acima */
    }

    .dica-box {
        background-color: #e8f4fd !important;  /* Fundo azul claro */
        padding: 0.8rem !important;            /* Padding interno reduzido */
        border-radius: 8px !important;         /* Cantos arredondados */
        border-left: 4px solid #1f77b4 !important; /* Borda azul √† esquerda */
        display: inline-block !important;      /* Para centralizar melhor */
        max-width: 400px !important;           /* Largura m√°xima da dica */
    }

    /* ===================================================================== */
    /* CONTAINERS DE RESPOSTA */
    /* ===================================================================== */

    /* Container estilizado para exibir as respostas da IA */
    .resposta-container {
        background-color: #f8f9fa;             /* Fundo cinza muito claro */
        padding: 1rem !important;              /* Espa√ßamento interno */
        border-radius: 8px;                    /* Cantos arredondados */
        border-left: 4px solid #4ecdc4;        /* Borda colorida √† esquerda */
        margin: 0.5rem 0 !important;           /* Margem pequena */
        box-shadow: 0 1px 3px rgba(0,0,0,0.1); /* Sombra sutil */
    }

    /* ===================================================================== */
    /* ELEMENTOS DIVERSOS */
    /* ===================================================================== */

    /* Cabe√ßalhos dos expandir/contrair (Expander) */
    .streamlit-expanderHeader {
        padding: 0.3rem 0 !important;          /* Padding reduzido */
    }

    /* Caixas de informa√ß√£o e alertas */
    .stAlert {
        padding: 0.5rem !important;            /* Padding reduzido */
        margin: 0.3rem 0 !important;           /* Margem reduzida */
    }

    /* Linhas separadoras horizontais */
    hr {
        margin: 0.5rem 0 !important;           /* Margem pequena */
        border-color: #e0e0e0 !important;      /* Cor cinza clara */
    }

    /* Anima√ß√£o de carregamento (spinner) */
    .stSpinner {
        margin: 0.3rem 0 !important;           /* Margem pequena */
    }

    /* Elementos de texto Markdown */
    .stMarkdown {
        margin-bottom: 0.3rem !important;      /* Margem pequena embaixo */
    }

    /* Linhas de colunas */
    .row-widget {
        margin: 0 !important;                  /* Remove margem */
    }

    /* √Årea de texto */
    .stTextArea textarea {
        min-height: 60px !important;           /* Altura m√≠nima */
    }

    /* ===================================================================== */
    /* BARRA DE ROLAGEM PERSONALIZADA */
    /* ===================================================================== */

    /* Largura da barra de rolagem */
    ::-webkit-scrollbar {
        width: 6px;                            /* Barra fina (6px) */
    }

    /* Fundo da trilha da barra de rolagem */
    ::-webkit-scrollbar-track {
        background: #f1f1f1;                   /* Cor cinza clara */
    }

    /* A barra de rolagem em si */
    ::-webkit-scrollbar-thumb {
        background: #888;                      /* Cor cinza */
        border-radius: 3px;                    /* Cantos arredondados */
    }

    /* Cor da barra quando o mouse passa sobre ela */
    ::-webkit-scrollbar-thumb:hover {
        background: #555;                      /* Cinza mais escuro */
    }
</style>
""", unsafe_allow_html=True)


# unsafe_allow_html=True permite usar HTML e CSS personalizados

# -----------------------------------------------------------------------------
# 4. DEFINI√á√ÉO DAS FUN√á√ïES - "Receitas" que o Programa Vai Usar
# -----------------------------------------------------------------------------

def cria_vector_store_faiss(chunks: List[Document]):
    """
    Esta fun√ß√£o cria um banco de dados especial para busca r√°pida de informa√ß√µes

    O que ela faz:
    1. Pega os peda√ßos de texto do documento
    2. Converte cada peda√ßo em n√∫meros (vetores) que representam o significado
    3. Cria um banco de dados FAISS para busca super r√°pida
    4. Salva tudo no computador para usar depois

    Par√¢metros:
        chunks: Lista de peda√ßos de documento j√° divididos

    Retorna:
        vectorstore: O banco de dados criado
    """
    # Cria o banco vetorial usando os chunks e o modelo de embeddings
    # FAISS √© uma biblioteca que faz busca muito r√°pida em vetores
    vectorstore = FAISS.from_documents(chunks, embeddings_model)

    # Salva o banco no disco r√≠gido para n√£o precisar recriar toda vez
    vectorstore.save_local(diretorio_vectorestore_faiss)

    return vectorstore


def carrega_vector_store_faiss(diretorio_vectorestore_faiss, embeddings_model):
    """
    Esta fun√ß√£o carrega um banco de dados vetorial j√° criado anteriormente

    O que ela faz:
    1. Procura o banco de dados salvo no disco
    2. Carrega ele na mem√≥ria
    3. Retorna pronto para uso

    Par√¢metros:
        diretorio_vectorestore_faiss: Pasta onde est√° salvo o banco
        embeddings_model: Modelo usado para criar os embeddings

    Retorna:
        vectorstore: O banco de dados carregado
    """
    # Carrega o banco vetorial do disco r√≠gido
    vectorstore = FAISS.load_local(diretorio_vectorestore_faiss, embeddings_model)
    return vectorstore


def num_tokens_from_string(string: str, encoding_name: str = "cl100k_base") -> int:
    """
    Esta fun√ß√£o conta quantos "tokens" (pedacinhos) tem em um texto

    Por que isso √© importante?
    - A IA tem limite de quantos tokens pode processar de uma vez
    - Precisamos saber se o texto cabe no limite
    - 1 token ‚âà 0.75 palavras em portugu√™s

    Par√¢metros:
        string: O texto para contar
        encoding_name: Tipo de codifica√ß√£o (padr√£o da OpenAI)

    Retorna:
        int: N√∫mero de tokens no texto
    """
    # Pega o codificador espec√≠fico da OpenAI
    encoding = tiktoken.get_encoding(encoding_name)

    # Codifica o texto em tokens e conta quantos s√£o
    num_tokens = len(encoding.encode(string))

    return num_tokens


def limpar_area_resposta():
    """
    Esta fun√ß√£o limpa a "mem√≥ria" da conversa anterior

    O que ela faz:
    - Remove todas as informa√ß√µes da conversa anterior
    - √â como apagar a lousa antes de escrever algo novo
    - Prepara o sistema para uma nova pergunta
    """
    # Lista de todas as coisas que queremos apagar da mem√≥ria
    keys_to_clear = [
        "ultima_pergunta",  # A pergunta que foi feita
        "ultima_resposta",  # A resposta que foi dada
        "ultima_resposta_completa",  # A resposta completa com metadados
        "resposta_exibida"  # Se j√° mostrou uma resposta
    ]

    # Para cada item na lista, remove da mem√≥ria se existir
    for key in keys_to_clear:
        if key in st.session_state:  # Se existe na mem√≥ria
            del st.session_state[key]  # Apaga da mem√≥ria


def processar_pergunta(pergunta, vectorstore, modelo):
    """
    Esta √© a fun√ß√£o principal que conversa com a IA!

    O que ela faz:
    1. Recebe sua pergunta
    2. Busca informa√ß√µes relevantes no documento
    3. Combina pergunta + informa√ß√µes encontradas
    4. Manda tudo para a IA (ChatGPT)
    5. Recebe e formata a resposta
    6. Retorna a resposta pronta

    Par√¢metros:
        pergunta: A pergunta feita pelo usu√°rio
        vectorstore: Banco de dados com o documento
        modelo: Qual modelo de IA usar (ex: gpt-3.5-turbo)

    Retorna:
        tuple: (resposta_formatada, resposta_completa)
    """
    # Cria uma inst√¢ncia do modelo de chat da OpenAI
    chat_instance = ChatOpenAI(model=modelo)

    # Cria uma "corrente" (chain) que vai:
    # 1. Receber a pergunta
    # 2. Buscar informa√ß√µes relevantes no documento (retrieval)
    # 3. Combinar tudo e mandar para a IA
    # 4. Retornar a resposta
    chat_chain = RetrievalQA.from_chain_type(
        llm=chat_instance,  # O modelo de IA a usar
        chain_type='stuff',  # Tipo: "encher" o prompt com informa√ß√µes
        retriever=vectorstore.as_retriever(search_type='mmr'),  # Como buscar no documento
        return_source_documents=True  # Retorna tamb√©m as fontes usadas
    )

    # Executa toda a cadeia com a pergunta do usu√°rio
    # Isso faz toda a m√°gica acontecer!
    resposta_do_chat = chat_chain.invoke({'query': pergunta})

    # Extrai apenas o texto da resposta (sem metadados)
    resposta_llm = resposta_do_chat.get('result', 'Nenhuma resposta dispon√≠vel.')

    # Formata o texto para ficar mais leg√≠vel
    # textwrap.fill quebra linhas longas em linhas de 150 caracteres
    resposta_formatada = textwrap.fill(resposta_llm, width=150)

    # Retorna tanto a resposta formatada quanto a completa (com metadados)
    return resposta_formatada, resposta_do_chat


# -----------------------------------------------------------------------------
# 5. CONFIGURA√á√ïES E VARI√ÅVEIS - Definindo os Par√¢metros do Sistema
# -----------------------------------------------------------------------------

# Carrega vari√°veis de ambiente do arquivo .env
# O arquivo .env cont√©m senhas e configura√ß√µes secretas
load_dotenv()

# Tenta pegar a chave da API da OpenAI de duas formas diferentes
openai_key = os.getenv('OPENAI_API_KEY')  # Do arquivo .env
openai_api_key = st.secrets["OPENAI_API_KEY"]  # Do Streamlit secrets (para deploy)

# Verifica se conseguiu pegar a chave da API
if not openai_key:
    # Se n√£o conseguiu, para tudo e mostra erro
    raise ValueError("A vari√°vel de ambiente 'OPENAI_API_KEY' n√£o foi encontrada no seu arquivo .env.")

# Configura√ß√µes dos modelos de IA
modelo = 'gpt-3.5-turbo-0125'  # Qual modelo do ChatGPT usar
embeddings_model = OpenAIEmbeddings()  # Modelo para converter texto em n√∫meros

# Configura√ß√µes de arquivos e diret√≥rios
diretorio_vectorestore_faiss = 'vectorestore_faiss'  # Onde salvar o banco vetorial
caminho_arquivo = r'BIA_RAG.pdf'  # Caminho do PDF para analisar

# -----------------------------------------------------------------------------
# 6. CARREGAMENTO E PROCESSAMENTO DO DOCUMENTO
# -----------------------------------------------------------------------------

# Tenta carregar o arquivo PDF
try:
    # Cria um carregador de PDF usando LangChain
    loader = PyPDFLoader(caminho_arquivo)

    # Carrega todo o conte√∫do do PDF
    # Cada p√°gina vira um "Document" separado na lista
    documentos = loader.load()

except FileNotFoundError:
    # Se n√£o conseguir achar o arquivo, mostra erro e para
    st.error(f"Erro: O arquivo PDF n√£o foi encontrado em '{caminho_arquivo}'. Por favor, verifique o caminho.")
    st.stop()  # Para a execu√ß√£o do programa

# Configura como dividir o texto em peda√ßos menores
# Isso √© necess√°rio porque a IA tem limite de texto que pode processar
text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=500,  # Cada peda√ßo tem no m√°ximo 500 tokens
    chunk_overlap=50,  # Peda√ßos se sobrep√µem em 50 tokens (para n√£o perder contexto)
    length_function=num_tokens_from_string,  # Usa nossa fun√ß√£o para contar tokens
    separators=['&', '\n\n', '.', ' '],  # Onde pode cortar o texto (em ordem de prefer√™ncia)
    add_start_index=True  # Adiciona √≠ndice de onde come√ßou cada peda√ßo
)

# Divide todos os documentos em peda√ßos menores
chunks = text_splitter.split_documents(documentos)

# -----------------------------------------------------------------------------
# 7. CONFIGURA√á√ÉO DA IA
# -----------------------------------------------------------------------------

# Cria uma inst√¢ncia do modelo de chat
chat = ChatOpenAI(
    model=modelo,  # Qual modelo usar
    temperature=0  # 0 = respostas mais precisas, 1 = mais criativas
)

# Cria um template de prompt (como a IA deve se comportar)
qa_prompt = ChatPromptTemplate.from_messages([
    # Mensagem do sistema (instru√ß√µes para a IA)
    ("system", (
        "Voc√™ √© um assistente especialista em an√°lise financeira e de investimento para aquicultura."
        "Use o seguinte contexto para responder √† pergunta, podendo complementar com informa√ß√µes da internet quando necess√°rio."
        "Os t√≥picos principais est√£o destacado entre aspas duplas. Se a resposta n√£o"
        " estiver no contexto, diga que n√£o sabe e pe√ßa mais detalhes para o questionamento:\n\n{context}"
    )),
    # Mensagem do usu√°rio (onde vai a pergunta)
    ("user", "{question}")
])

# Cria uma cadeia que combina documentos com o prompt
chain = create_stuff_documents_chain(llm=chat, prompt=qa_prompt)

# Carrega o banco de dados vetorial (onde est√£o os documentos processados)
vectorstore = FAISS.load_local(
    diretorio_vectorestore_faiss,
    embeddings_model,
    allow_dangerous_deserialization=True  # Permite carregar o arquivo (necess√°rio para FAISS)
)

# -----------------------------------------------------------------------------
# 8. INTERFACE DO USU√ÅRIO - A Parte Visual que o Usu√°rio V√™
# -----------------------------------------------------------------------------

# T√çTULO PRINCIPAL - Bem no topo da p√°gina
# Usa HTML personalizado com a classe CSS que definimos
st.markdown("""
<div class='titulo-principal'>
    <h1>ü§ñ Assistente de IA: Biometria Inteligente para Aquicultura</h1>
    <p>Fa√ßa perguntas sobre o documento carregado e obtenha respostas precisas</p>
</div>
""", unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# 9. INICIALIZA√á√ÉO DA MEM√ìRIA - Preparando as Vari√°veis de Estado
# -----------------------------------------------------------------------------

# O Streamlit "esquece" tudo quando voc√™ interage com a p√°gina
# st.session_state √© como a "mem√≥ria" que guarda informa√ß√µes entre intera√ß√µes

# Verifica se as vari√°veis de controle existem na mem√≥ria, se n√£o, cria elas
if "campo_habilitado" not in st.session_state:
    st.session_state["campo_habilitado"] = False  # Campo de pergunta desabilitado inicialmente

if "resposta_exibida" not in st.session_state:
    st.session_state["resposta_exibida"] = False  # Nenhuma resposta sendo exibida inicialmente

# -----------------------------------------------------------------------------
# 10. LAYOUT PRINCIPAL - Organizando os Elementos na P√°gina
# -----------------------------------------------------------------------------

# Divide a p√°gina em 3 colunas com propor√ß√µes [1, 2, 1]
# Coluna 1: 25% da largura (espa√ßo lateral esquerdo)
# Coluna 2: 50% da largura (conte√∫do principal - bot√µes)
# Coluna 3: 25% da largura (informa√ß√µes do sistema)
header_col1, header_col2, header_col3 = st.columns([1, 2, 1])

# COLUNA CENTRAL - Onde ficam os bot√µes principais
with header_col2:
    # Verifica o estado atual para mostrar o bot√£o correto
    if st.session_state.get("resposta_exibida", False):
        # Se j√° mostrou uma resposta, mostra bot√£o para fazer nova pergunta
        btn_nova_pergunta = st.button(
            "üîÑ Fazer Nova Pergunta",
            type="primary",  # Estilo de bot√£o principal (colorido)
            use_container_width=True  # Ocupa toda a largura dispon√≠vel
        )
    else:
        # Se ainda n√£o fez nenhuma pergunta, mostra bot√£o para iniciar
        btn_iniciar = st.button(
            "üìù Iniciar Conversa",
            type="primary",
            use_container_width=True
        )

# COLUNA DIREITA - Informa√ß√µes do sistema
with header_col3:
    # Cria uma se√ß√£o expans√≠vel com informa√ß√µes t√©cnicas
    with st.expander("‚ÑπÔ∏è Sistema", expanded=False):  # Come√ßa fechada
        # Mostra informa√ß√µes sobre o documento carregado
        st.caption(f"üìÑ **Doc:** {caminho_arquivo.split('/')[-1]}")  # Nome do arquivo
        st.caption(f"üìä **P√°ginas:** {len(documentos)}")  # Quantas p√°ginas tem
        st.caption(f"üî§ **Chunks:** {len(chunks)}")  # Quantos peda√ßos foram criados
        st.caption(f"ü§ñ **Modelo:** {modelo}")  # Qual IA est√° sendo usada

# -----------------------------------------------------------------------------
# 11. L√ìGICA DOS BOT√ïES - O que Acontece Quando Clica nos Bot√µes
# -----------------------------------------------------------------------------

# Se j√° tem resposta exibida e clicou no bot√£o de nova pergunta
if st.session_state.get("resposta_exibida", False):
    # Verifica se o bot√£o foi clicado (precisa existir na mem√≥ria local)
    if 'btn_nova_pergunta' in locals() and btn_nova_pergunta:
        limpar_area_resposta()  # Limpa tudo da conversa anterior
        st.session_state["campo_habilitado"] = True  # Habilita o campo de pergunta
        st.session_state["resposta_exibida"] = False  # Marca que n√£o tem resposta exibida
        st.rerun()  # Atualiza a p√°gina (recarrega)

# Se n√£o tem resposta e clicou no bot√£o de iniciar
else:
    # Verifica se o bot√£o foi clicado
    if 'btn_iniciar' in locals() and btn_iniciar:
        st.session_state["campo_habilitado"] = True  # Habilita o campo de pergunta

# -----------------------------------------------------------------------------
# 12. INTERFACE DE PERGUNTA - Onde o Usu√°rio Digita suas Perguntas
# -----------------------------------------------------------------------------

# S√≥ mostra o campo de pergunta se:
# 1. O campo est√° habilitado E
# 2. N√£o tem resposta sendo exibida
if st.session_state.get("campo_habilitado", False) and not st.session_state.get("resposta_exibida", False):

    # Container principal para o campo de pergunta - agora pr√≥ximo ao bot√£o
    st.markdown("""
    <div class='campo-pergunta-container'>
    """, unsafe_allow_html=True)

    # Wrapper interno para controlar largura m√°xima
    st.markdown("""
    <div class='campo-pergunta-wrapper'>
    """, unsafe_allow_html=True)

    # T√≠tulo da se√ß√£o - agora usando classe CSS espec√≠fica
    st.markdown("""
    <div class='titulo-pergunta'>
        <h3>üí¨ Digite sua pergunta:</h3>
    </div>
    """, unsafe_allow_html=True)

    # Campo de entrada estilo chat
    # Este √© o campo onde o usu√°rio digita a pergunta
    pergunta = st.chat_input("Digite sua pergunta aqui e pressione Enter...")

    # Se o usu√°rio digitou algo e pressionou Enter
    if pergunta:
        try:
            # Mostra anima√ß√£o de carregamento enquanto processa
            with st.spinner('üîÑ Processando...'):
                # Chama nossa fun√ß√£o principal que conversa com a IA
                resposta_formatada, resposta_do_chat = processar_pergunta(pergunta, vectorstore, modelo)

            # Salva tudo na mem√≥ria da sess√£o para usar depois
            st.session_state["ultima_pergunta"] = pergunta  # A pergunta feita
            st.session_state["ultima_resposta"] = resposta_formatada  # A resposta formatada
            st.session_state["ultima_resposta_completa"] = resposta_do_chat  # Resposta completa
            st.session_state["resposta_exibida"] = True  # Marca que tem resposta
            st.session_state["campo_habilitado"] = False  # Desabilita o campo

            # Atualiza a p√°gina para mostrar a resposta
            st.rerun()

        except Exception as e:
            # Se deu erro, mostra mensagens de ajuda
            st.error(f"‚ùå Erro: {str(e)}")
            st.info("üí° Tente reformular sua pergunta.")

    # Instru√ß√£o para o usu√°rio - agora usando classes CSS espec√≠ficas
    st.markdown("""
    <div class='dica-container'>
        <div class='dica-box'>
            üí° <strong>Dica:</strong> Digite sua pergunta e pressione <strong>Enter</strong>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Fecha os containers HTML
    st.markdown("</div>", unsafe_allow_html=True)  # Fecha campo-pergunta-wrapper
    st.markdown("</div>", unsafe_allow_html=True)  # Fecha campo-pergunta-container

# -----------------------------------------------------------------------------
# 13. EXIBI√á√ÉO DA RESPOSTA - Mostrando o Resultado para o Usu√°rio
# -----------------------------------------------------------------------------

# Se tem resposta para mostrar
elif st.session_state.get("resposta_exibida", False):

    # Divide em 2 colunas: 80% para resposta, 20% para dicas
    resp_main_col, resp_side_col = st.columns([4, 1])

    # COLUNA PRINCIPAL - A resposta da IA
    with resp_main_col:
        # T√≠tulo da se√ß√£o
        st.markdown("**üéØ Resposta:**")

        # Mostra qual foi a pergunta original
        st.markdown(f"**Pergunta:** {st.session_state['ultima_pergunta']}")

        # Container estilizado para a resposta
        # Usa a classe CSS que definimos
        st.markdown("""
        <div class='resposta-container'>
        """, unsafe_allow_html=True)

        # A resposta da IA
        st.write(st.session_state["ultima_resposta"])

        # Fecha o container
        st.markdown("</div>", unsafe_allow_html=True)

    # COLUNA LATERAL - Dicas para o usu√°rio
    with resp_side_col:
        st.info("üí° Use o bot√£o acima para nova pergunta")

    # SE√á√ÉO DE DOCUMENTOS FONTE - Mostra de onde veio a informa√ß√£o
    if "ultima_resposta_completa" in st.session_state:
        resposta_completa = st.session_state["ultima_resposta_completa"]

        # Se tem documentos fonte na resposta
        if 'source_documents' in resposta_completa and resposta_completa['source_documents']:
            # Se√ß√£o expans√≠vel para mostrar as fontes
            with st.expander("üìö Documentos fonte", expanded=False):
                # Divide em 2 colunas para mostrar os documentos
                doc_col1, doc_col2 = st.columns(2)

                # Para cada documento fonte encontrado
                for i, doc in enumerate(resposta_completa['source_documents']):
                    # Alterna entre as colunas (par na primeira, √≠mpar na segunda)
                    with doc_col1 if i % 2 == 0 else doc_col2:
                        # T√≠tulo do documento
                        st.caption(f"**üìÑ Doc {i + 1}:**")

                        # Conte√∫do do documento (limitado a 300 caracteres)
                        conteudo = doc.page_content[:300] + "..." if len(doc.page_content) > 300 else doc.page_content
                        st.text(conteudo)

                        # Metadados (informa√ß√µes extras) se existirem
                        if hasattr(doc, 'metadata') and doc.metadata:
                            st.caption(f"Meta: {doc.metadata}")

# -----------------------------------------------------------------------------
# 14. ESTADO INICIAL - O que Mostrar Quando a P√°gina Carrega pela Primeira Vez
# -----------------------------------------------------------------------------

# Se n√£o tem campo habilitado nem resposta exibida (estado inicial)
else:
    # Cria uma coluna centralizada para a mensagem de boas-vindas
    welcome_col = st.columns([1, 2, 1])[1]  # Pega s√≥ a coluna do meio

    with welcome_col:
        # Mensagem explicativa para o usu√°rio
        st.info("üëÜ **Clique em 'Iniciar Conversa' para come√ßar**")

# =============================================================================
# FIM DO PROGRAMA
# =============================================================================
# Este programa cria uma interface completa para conversar com documentos PDF
# usando intelig√™ncia artificial. O usu√°rio pode fazer perguntas e receber
# respostas baseadas no conte√∫do do documento.
# =============================================================================